{
  "contractName": "PausableCrowdsale",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_wallet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_weiRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Extension of Crowdsale contract where purchases can be paused and unpaused by the pauser role.\",\"kind\":\"dev\",\"methods\":{\"buyTokens(address)\":{\"details\":\"low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.\",\"params\":{\"beneficiary\":\"Recipient of the token purchase\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"title\":\"PausableCrowdsale\",\"version\":1},\"userdoc\":{\"events\":{\"TokensPurchased(address,address,uint256,uint256)\":{\"notice\":\"Event for token purchase logging\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/crowdsale-contracts/validation/PausableCrowdsale.sol\":\"PausableCrowdsale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d491a2ca79dbf44bc02e876e21a5847a2cbcc011188532ad8662cdc1c134a4e\",\"dweb:/ipfs/QmUQXhSV8ZvHLzfdG89ZNSh1nLrAYyjnNBLznJGwGcwVk8\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"project:/contracts/crowdsale-contracts/Crowdsale.sol\":{\"keccak256\":\"0x4caae4e4846d676316991d27f0fa2440ac76c7bcb872303b79f84b322bc982b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c56299fd63f4e4eec266f72e513d43ab3a1896d23d5e9e10d5a4f06f3004bb1\",\"dweb:/ipfs/QmVQ6Tv38HT9GoUgw5E1bzNiU24uYDqfijrFSNFGjzpPMj\"]},\"project:/contracts/crowdsale-contracts/validation/PausableCrowdsale.sol\":{\"keccak256\":\"0xc8803c9b038472cf0b470855aa3114517c645b490d1db004ee9c3b515c5d6f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79d97bf4a2c01b15c7224de5eddbcff15131c32abc201b4d9dedc120c995ca2b\",\"dweb:/ipfs/QmZhyNDYpXKXoZtpnTDtgvJKgj9HdU5bzB5ZRPyFMs4JLU\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../Crowdsale.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\n/**\r\n * @title PausableCrowdsale\r\n * @dev Extension of Crowdsale contract where purchases can be paused and unpaused by the pauser role.\r\n */\r\nabstract contract PausableCrowdsale is Crowdsale, Pausable {\r\n\r\n    /**\r\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\r\n     * Use super to concatenate validations.\r\n     * Adds the validation that the crowdsale must not be paused.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal virtual override view whenNotPaused {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n}",
  "sourcePath": "D:\\Files\\Blockchain\\Summer-Projects\\01.Crowdsale\\Crowdsale-App\\contracts\\crowdsale-contracts\\validation\\PausableCrowdsale.sol",
  "ast": {
    "absolutePath": "project:/contracts/crowdsale-contracts/validation/PausableCrowdsale.sol",
    "exportedSymbols": {
      "Address": [
        2204
      ],
      "Context": [
        2226
      ],
      "Crowdsale": [
        7286
      ],
      "IERC20": [
        1443
      ],
      "Pausable": [
        739
      ],
      "PausableCrowdsale": [
        7400
      ],
      "ReentrancyGuard": [
        779
      ],
      "SafeERC20": [
        1909
      ],
      "SafeMath": [
        2777
      ]
    },
    "id": 7401,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7373,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:59"
      },
      {
        "absolutePath": "project:/contracts/crowdsale-contracts/Crowdsale.sol",
        "file": "../Crowdsale.sol",
        "id": 7374,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7401,
        "sourceUnit": 7287,
        "src": "60:26:59",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/security/Pausable.sol",
        "file": "@openzeppelin/contracts/security/Pausable.sol",
        "id": 7375,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7401,
        "sourceUnit": 740,
        "src": "88:55:59",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 7377,
              "name": "Crowdsale",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7286,
              "src": "329:9:59"
            },
            "id": 7378,
            "nodeType": "InheritanceSpecifier",
            "src": "329:9:59"
          },
          {
            "baseName": {
              "id": 7379,
              "name": "Pausable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 739,
              "src": "340:8:59"
            },
            "id": 7380,
            "nodeType": "InheritanceSpecifier",
            "src": "340:8:59"
          }
        ],
        "canonicalName": "PausableCrowdsale",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 7376,
          "nodeType": "StructuredDocumentation",
          "src": "147:141:59",
          "text": " @title PausableCrowdsale\n @dev Extension of Crowdsale contract where purchases can be paused and unpaused by the pauser role."
        },
        "fullyImplemented": false,
        "id": 7400,
        "linearizedBaseContracts": [
          7400,
          739,
          7286,
          779,
          2226
        ],
        "name": "PausableCrowdsale",
        "nameLocation": "308:17:59",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              7209
            ],
            "body": {
              "id": 7398,
              "nodeType": "Block",
              "src": "853:71:59",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7394,
                        "name": "_beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7383,
                        "src": "891:12:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7395,
                        "name": "_weiAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7385,
                        "src": "905:10:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 7391,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967271,
                        "src": "864:5:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_PausableCrowdsale_$7400_$",
                          "typeString": "type(contract super PausableCrowdsale)"
                        }
                      },
                      "id": 7393,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_preValidatePurchase",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7209,
                      "src": "864:26:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) view"
                      }
                    },
                    "id": 7396,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "864:52:59",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7397,
                  "nodeType": "ExpressionStatement",
                  "src": "864:52:59"
                }
              ]
            },
            "documentation": {
              "id": 7381,
              "nodeType": "StructuredDocumentation",
              "src": "358:372:59",
              "text": " @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n Use super to concatenate validations.\n Adds the validation that the crowdsale must not be paused.\n @param _beneficiary Address performing the token purchase\n @param _weiAmount Value in wei involved in the purchase"
            },
            "id": 7399,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 7389,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 7388,
                  "name": "whenNotPaused",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 695,
                  "src": "839:13:59"
                },
                "nodeType": "ModifierInvocation",
                "src": "839:13:59"
              }
            ],
            "name": "_preValidatePurchase",
            "nameLocation": "745:20:59",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7387,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "825:8:59"
            },
            "parameters": {
              "id": 7386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7383,
                  "mutability": "mutable",
                  "name": "_beneficiary",
                  "nameLocation": "774:12:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 7399,
                  "src": "766:20:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7382,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "766:7:59",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7385,
                  "mutability": "mutable",
                  "name": "_weiAmount",
                  "nameLocation": "796:10:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 7399,
                  "src": "788:18:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7384,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "788:7:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "765:42:59"
            },
            "returnParameters": {
              "id": 7390,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "853:0:59"
            },
            "scope": 7400,
            "src": "736:188:59",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 7401,
        "src": "290:637:59",
        "usedErrors": []
      }
    ],
    "src": "33:894:59"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/crowdsale-contracts/validation/PausableCrowdsale.sol",
    "exportedSymbols": {
      "Address": [
        2204
      ],
      "Context": [
        2226
      ],
      "Crowdsale": [
        7286
      ],
      "IERC20": [
        1443
      ],
      "Pausable": [
        739
      ],
      "PausableCrowdsale": [
        7400
      ],
      "ReentrancyGuard": [
        779
      ],
      "SafeERC20": [
        1909
      ],
      "SafeMath": [
        2777
      ]
    },
    "id": 7401,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7373,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:59"
      },
      {
        "absolutePath": "project:/contracts/crowdsale-contracts/Crowdsale.sol",
        "file": "../Crowdsale.sol",
        "id": 7374,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7401,
        "sourceUnit": 7287,
        "src": "60:26:59",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/security/Pausable.sol",
        "file": "@openzeppelin/contracts/security/Pausable.sol",
        "id": 7375,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7401,
        "sourceUnit": 740,
        "src": "88:55:59",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 7377,
              "name": "Crowdsale",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7286,
              "src": "329:9:59"
            },
            "id": 7378,
            "nodeType": "InheritanceSpecifier",
            "src": "329:9:59"
          },
          {
            "baseName": {
              "id": 7379,
              "name": "Pausable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 739,
              "src": "340:8:59"
            },
            "id": 7380,
            "nodeType": "InheritanceSpecifier",
            "src": "340:8:59"
          }
        ],
        "canonicalName": "PausableCrowdsale",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 7376,
          "nodeType": "StructuredDocumentation",
          "src": "147:141:59",
          "text": " @title PausableCrowdsale\n @dev Extension of Crowdsale contract where purchases can be paused and unpaused by the pauser role."
        },
        "fullyImplemented": false,
        "id": 7400,
        "linearizedBaseContracts": [
          7400,
          739,
          7286,
          779,
          2226
        ],
        "name": "PausableCrowdsale",
        "nameLocation": "308:17:59",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              7209
            ],
            "body": {
              "id": 7398,
              "nodeType": "Block",
              "src": "853:71:59",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 7394,
                        "name": "_beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7383,
                        "src": "891:12:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 7395,
                        "name": "_weiAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7385,
                        "src": "905:10:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 7391,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967271,
                        "src": "864:5:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_PausableCrowdsale_$7400_$",
                          "typeString": "type(contract super PausableCrowdsale)"
                        }
                      },
                      "id": 7393,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_preValidatePurchase",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7209,
                      "src": "864:26:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) view"
                      }
                    },
                    "id": 7396,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "864:52:59",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7397,
                  "nodeType": "ExpressionStatement",
                  "src": "864:52:59"
                }
              ]
            },
            "documentation": {
              "id": 7381,
              "nodeType": "StructuredDocumentation",
              "src": "358:372:59",
              "text": " @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n Use super to concatenate validations.\n Adds the validation that the crowdsale must not be paused.\n @param _beneficiary Address performing the token purchase\n @param _weiAmount Value in wei involved in the purchase"
            },
            "id": 7399,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 7389,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 7388,
                  "name": "whenNotPaused",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 695,
                  "src": "839:13:59"
                },
                "nodeType": "ModifierInvocation",
                "src": "839:13:59"
              }
            ],
            "name": "_preValidatePurchase",
            "nameLocation": "745:20:59",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7387,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "825:8:59"
            },
            "parameters": {
              "id": 7386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7383,
                  "mutability": "mutable",
                  "name": "_beneficiary",
                  "nameLocation": "774:12:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 7399,
                  "src": "766:20:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7382,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "766:7:59",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7385,
                  "mutability": "mutable",
                  "name": "_weiAmount",
                  "nameLocation": "796:10:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 7399,
                  "src": "788:18:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7384,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "788:7:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "765:42:59"
            },
            "returnParameters": {
              "id": 7390,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "853:0:59"
            },
            "scope": 7400,
            "src": "736:188:59",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 7401,
        "src": "290:637:59",
        "usedErrors": []
      }
    ],
    "src": "33:894:59"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.14+commit.80d49f37.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-05-25T03:51:37.983Z",
  "devdoc": {
    "details": "Extension of Crowdsale contract where purchases can be paused and unpaused by the pauser role.",
    "kind": "dev",
    "methods": {
      "buyTokens(address)": {
        "details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
        "params": {
          "beneficiary": "Recipient of the token purchase"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "title": "PausableCrowdsale",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TokensPurchased(address,address,uint256,uint256)": {
        "notice": "Event for token purchase logging"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  }
}